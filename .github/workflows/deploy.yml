name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Inject GitHub token and RPC endpoints
      env:
        WTFDUDE: ${{ secrets.WTFDUDE }}
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        SOLANA_RPC_ENDPOINT: ${{ secrets.SOLANA_RPC_ENDPOINT }}
        BASE_RPC_ENDPOINT: ${{ secrets.BASE_RPC_ENDPOINT }}
      run: |
        echo "🔧 Creating production configuration files..."
        echo "📍 Current working directory: $(pwd)"
        echo "📁 Files in js/ directory before injection:"
        ls -la js/
        echo ""
        
        # Check if the secrets are available
        if [ -z "$WTFDUDE" ]; then
          echo "❌ ERROR: WTFDUDE secret is not set or is empty"
        else
          echo "✅ WTFDUDE secret is available (length: ${#WTFDUDE})"
        fi
        
        if [ -z "$PERSONAL_ACCESS_TOKEN" ]; then
          echo "❌ ERROR: PERSONAL_ACCESS_TOKEN secret is not set or is empty"
        else
          echo "✅ PERSONAL_ACCESS_TOKEN secret is available (length: ${#PERSONAL_ACCESS_TOKEN})"
        fi
        
        if [ -z "$SOLANA_RPC_ENDPOINT" ]; then
          echo "❌ ERROR: SOLANA_RPC_ENDPOINT secret is not set or is empty"
        else
          echo "✅ SOLANA_RPC_ENDPOINT secret is available (preview: ${SOLANA_RPC_ENDPOINT:0:50}...)"
        fi
        
        if [ -z "$BASE_RPC_ENDPOINT" ]; then
          echo "❌ ERROR: BASE_RPC_ENDPOINT secret is not set or is empty"
        else
          echo "✅ BASE_RPC_ENDPOINT secret is available (preview: ${BASE_RPC_ENDPOINT:0:50}...)"
        fi
        
        # Use WTFDUDE as the main token for banner operations
        GITHUB_TOKEN="${WTFDUDE:-$PERSONAL_ACCESS_TOKEN}"
        
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "❌ ERROR: No GitHub token available"
          echo "🔧 Please configure WTFDUDE or PERSONAL_ACCESS_TOKEN secret"
          exit 1
        fi
        
        # Create production token config
        echo "🔧 Creating token-config.js..."
        cat > js/token-config.js << EOF
        // Production token configuration - injected at build time
        window.PRODUCTION_CONFIG = {
          token: "$GITHUB_TOKEN",
          environment: 'production'
        };
        console.log('🚀 PRODUCTION BUILD - Token injected at build time');
        console.log('✅ Production token configuration loaded');
        EOF
        
        # Create production RPC config with QuickNode endpoints
        echo "� Creating production-config.js with QuickNode endpoints..."
        cat > js/production-config.js << EOF
        // Production configuration injected at build time from GitHub Secrets
        (function() {
          'use strict';
          
          console.log('🔍 Production config loading...');
          
          // Check if production config is already loaded
          if (window.PRODUCTION_CONFIG) {
            console.log('🔐 Production config already loaded, skipping fallback');
            return;
          }
          
          // Secure configuration from GitHub Secrets
          window.PRODUCTION_CONFIG = {
            token: '$GITHUB_TOKEN',
            rpc: {
              solana: '$SOLANA_RPC_ENDPOINT',
              base: '$BASE_RPC_ENDPOINT'
            },
            injectedAt: new Date().toISOString(),
            source: 'github-actions'
          };
          
          console.log('🔐 Production configuration loaded from GitHub Secrets');
          console.log('📊 RPC Status:', {
            solana: !!window.PRODUCTION_CONFIG.rpc.solana ? 'LOADED' : 'MISSING',
            base: !!window.PRODUCTION_CONFIG.rpc.base ? 'LOADED' : 'MISSING',
            solanaEndpoint: window.PRODUCTION_CONFIG.rpc.solana ? window.PRODUCTION_CONFIG.rpc.solana.substring(0, 50) + '...' : 'NULL'
          });
          
          // Update ENV_CONFIG if it exists
          if (window.ENV_CONFIG && typeof window.ENV_CONFIG.updateFromSecureAPI === 'function') {
            const secureConfigs = {
              github: { token: window.PRODUCTION_CONFIG.token },
              rpc: window.PRODUCTION_CONFIG.rpc
            };
            window.ENV_CONFIG.updateFromSecureAPI(secureConfigs);
            console.log('✅ ENV_CONFIG updated with GitHub Secrets');
          }
        })();
        EOF
        
        echo "� Files in js/ directory after injection:"
        ls -la js/
        echo ""
        echo "🔍 NEW production-config.js content:"
        cat js/production-config.js
        echo ""
        echo "✅ Production configuration complete!"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
