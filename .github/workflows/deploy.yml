name: Deploy Wild West Launchpad

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Debug environment and secrets
        run: |
          echo "üîç DEBUGGING GITHUB ENVIRONMENT:"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"
          echo "Runner: ${{ runner.os }}"
          echo "Workflow environment: github-pages"
          echo ""
          echo "üîç SECRET DIAGNOSTIC TEST:"
          echo "Testing if secrets are accessible in this workflow context..."
        
      - name: Test secret access without environment variables
        run: |
          echo "üß™ TESTING DIRECT SECRET ACCESS:"
          echo "This step tests if secrets are accessible at all"
          echo "SOLANA_RPC_ENDPOINT configured: ${{ secrets.SOLANA_RPC_ENDPOINT != '' }}"
          echo "BASE_RPC_ENDPOINT configured: ${{ secrets.BASE_RPC_ENDPOINT != '' }}"
        
      - name: Inject QuickNode secrets
        env:
          SOLANA_RPC_ENDPOINT: ${{ secrets.SOLANA_RPC_ENDPOINT }}
          BASE_RPC_ENDPOINT: ${{ secrets.BASE_RPC_ENDPOINT }}
        run: |
          echo "üîß Injecting QuickNode secrets..."
          echo "üîç Environment variables debug:"
          echo "üîç Running in repository: ${{ github.repository }}"
          echo "üîç Running on ref: ${{ github.ref }}"
          echo "üîç Event name: ${{ github.event_name }}"
          echo ""
          echo "SOLANA_RPC_ENDPOINT present: $([ -n \"$SOLANA_RPC_ENDPOINT\" ] && echo 'true' || echo 'false')"
          echo "BASE_RPC_ENDPOINT present: $([ -n \"$BASE_RPC_ENDPOINT\" ] && echo 'true' || echo 'false')"
          echo "SOLANA_RPC_ENDPOINT length: ${#SOLANA_RPC_ENDPOINT}"
          echo "BASE_RPC_ENDPOINT length: ${#BASE_RPC_ENDPOINT}"
          
          # Debug: Check if secrets are empty or null
          if [ -z "$SOLANA_RPC_ENDPOINT" ]; then
            echo "‚ùå CRITICAL: SOLANA_RPC_ENDPOINT is empty or undefined!"
            echo "‚ùå This indicates the GitHub Secret is not properly configured"
            echo "‚ùå Please check repository settings > Secrets and variables > Actions"
          else
            echo "‚úÖ SOLANA_RPC_ENDPOINT is available"
          fi
          
          if [ -z "$BASE_RPC_ENDPOINT" ]; then
            echo "‚ùå CRITICAL: BASE_RPC_ENDPOINT is empty or undefined!"
            echo "‚ùå This indicates the GitHub Secret is not properly configured"
          else
            echo "‚úÖ BASE_RPC_ENDPOINT is available"
          fi
          
          # Ensure js directory exists
          mkdir -p js
          
          # Check if we have valid endpoints before writing config
          if [ -n "$SOLANA_RPC_ENDPOINT" ] && [ -n "$BASE_RPC_ENDPOINT" ]; then
            echo "‚úÖ Both endpoints available, creating production config with GitHub Secrets..."
            
            # Overwrite production config file with secret injection
            echo "üîÑ Overwriting existing production-config.js with GitHub Secrets..."
            echo "// Production configuration injected from GitHub Secrets" > js/production-config.js
            echo "(function() {" >> js/production-config.js
            echo "  'use strict';" >> js/production-config.js
            echo "  " >> js/production-config.js
            echo "  if (window.PRODUCTION_CONFIG) {" >> js/production-config.js
            echo "    console.log('üîê Production config already loaded');" >> js/production-config.js
            echo "    return;" >> js/production-config.js
            echo "  }" >> js/production-config.js
            echo "  " >> js/production-config.js
            echo "  window.PRODUCTION_CONFIG = {" >> js/production-config.js
            echo "    rpc: {" >> js/production-config.js
            echo "      solana: '${SOLANA_RPC_ENDPOINT}'," >> js/production-config.js
            echo "      base: '${BASE_RPC_ENDPOINT}'" >> js/production-config.js
            echo "    }," >> js/production-config.js
            echo "    injectedAt: new Date().toISOString()," >> js/production-config.js
            echo "    source: 'github-actions'" >> js/production-config.js
            echo "  };" >> js/production-config.js
            echo "  " >> js/production-config.js
            echo "  console.log('üîê QuickNode endpoints loaded from GitHub Secrets');" >> js/production-config.js
            echo "  console.log('üìä Solana endpoint:', window.PRODUCTION_CONFIG.rpc.solana ? 'LOADED (' + window.PRODUCTION_CONFIG.rpc.solana.substring(0, 30) + '...)' : 'MISSING');" >> js/production-config.js
            echo "  console.log('üìä Base endpoint:', window.PRODUCTION_CONFIG.rpc.base ? 'LOADED (' + window.PRODUCTION_CONFIG.rpc.base.substring(0, 30) + '...)' : 'MISSING');" >> js/production-config.js
            echo "})();" >> js/production-config.js
            
            echo "‚úÖ Production config updated with QuickNode secrets"
          else
            echo "‚ö†Ô∏è Some endpoints missing, keeping placeholder config for debugging..."
            echo "‚ö†Ô∏è SOLANA_RPC_ENDPOINT available: $([ -n \"$SOLANA_RPC_ENDPOINT\" ] && echo 'YES' || echo 'NO')"
            echo "‚ö†Ô∏è BASE_RPC_ENDPOINT available: $([ -n \"$BASE_RPC_ENDPOINT\" ] && echo 'YES' || echo 'NO')"
            echo "‚ö†Ô∏è Production config will use fallback placeholder"
          fi
          
          echo "‚úÖ Production config updated with QuickNode secrets"
          echo "üìÑ Generated production-config.js:"
          cat js/production-config.js
          
          # Verify file exists and has content
          if [ -f "js/production-config.js" ]; then
            echo "‚úÖ production-config.js file exists"
            echo "üìä File size: $(wc -c < js/production-config.js) bytes"
            echo "üìä File permissions: $(ls -la js/production-config.js)"
          else
            echo "‚ùå production-config.js file NOT found!"
            exit 1
          fi
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4