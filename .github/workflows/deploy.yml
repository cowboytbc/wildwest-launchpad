name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Inject GitHub token directly into secure-config.js
      env:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        SOLANA_RPC_ENDPOINT: ${{ secrets.SOLANA_RPC_ENDPOINT }}
        BASE_RPC_ENDPOINT: ${{ secrets.BASE_RPC_ENDPOINT }}
      run: |
        echo "üîß Injecting production token with simple Node.js approach..."
        
        # Create a simple, reliable Node.js injection script
        cat > inject-token.js << 'EOF'
        const fs = require('fs');
        const token = process.env.PERSONAL_ACCESS_TOKEN;
        
        if (!token) {
          console.error('‚ùå PERSONAL_ACCESS_TOKEN not found');
          process.exit(1);
        }
        
        console.log('üîß Token found, injecting into secure-config.js...');
        
        let content = fs.readFileSync('js/secure-config.js', 'utf8');
        
        // Find and replace the specific method
        const oldMethod = 'getServiceTokenDirect() {\n    // Method 1: Runtime environment configuration (your service token)';
        const newMethod = `getServiceTokenDirect() {
    // Method 0: Production token (injected at build time)
    const PRODUCTION_TOKEN = "${token}";
    if (PRODUCTION_TOKEN && PRODUCTION_TOKEN.length > 10) {
      console.log("‚úÖ Production GitHub token loaded from build injection");
      return PRODUCTION_TOKEN;
    }
    // Method 1: Runtime environment configuration (your service token)`;
        
        if (content.includes(oldMethod)) {
          content = content.replace(oldMethod, newMethod);
          console.log('‚úÖ Method injection successful');
        } else {
          console.error('‚ùå Could not find injection point');
          process.exit(1);
        }
        
        // Add production marker
        const oldDebug = "console.log('üîç SecureConfig Debug Info:');";
        const newDebug = `console.log('üîç SecureConfig Debug Info:');
        console.log('üöÄ PRODUCTION BUILD - Token injected at build time');`;
        
        content = content.replace(oldDebug, newDebug);
        
        fs.writeFileSync('js/secure-config.js', content);
        console.log('‚úÖ Token injection completed');
        EOF
        
        # Execute the injection
        node inject-token.js
        
        # Verify the results
        echo "üîç Verification:"
        grep -n "PRODUCTION_TOKEN" js/secure-config.js || echo "‚ùå Token not found"
        grep -n "PRODUCTION BUILD" js/secure-config.js || echo "‚ùå Marker not found"
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
